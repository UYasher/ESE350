
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  000003ea  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001658  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fe  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e5  00000000  00000000  00002906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  000030ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000170e  00000000  00000000  00003931  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000503f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  9e:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
void drawrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	drawline(buff, x, y, x+w-1, y, color);
	drawline(buff, x+w-1, y, x+w-1, y+h-1, color);
	drawline(buff, x+w-1, y+h-1, x, y+h-1, color);
	drawline(buff, x, y+h-1, x, y, color);
}
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x4a>
 11c:	00 00       	nop
 11e:	8e e2       	ldi	r24, 0x2E	; 46
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x56>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x5c>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x6e>
 140:	00 00       	nop
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_data>:
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	ac 01       	movw	r20, r24
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_data+0x14>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <lcd_data+0x10>
 162:	40 ff       	sbrs	r20, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x20>
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_data+0x22>
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	78 f7       	brcc	.-34     	; 0x152 <lcd_data+0x8>
 174:	08 95       	ret

00000176 <lcd_set_brightness>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8c 2f       	mov	r24, r28
 182:	8f 73       	andi	r24, 0x3F	; 63
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <write_buffer>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	ec 01       	movw	r28, r24
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	ef 0e       	add	r14, r31
 1be:	f1 1c       	adc	r15, r1
 1c0:	80 6b       	ori	r24, 0xB0	; 176
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1de:	8e 01       	movw	r16, r28
 1e0:	00 58       	subi	r16, 0x80	; 128
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	89 91       	ld	r24, Y+
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1ea:	c0 17       	cp	r28, r16
 1ec:	d1 07       	cpc	r29, r17
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <write_buffer+0x58>
 1f0:	e8 01       	movw	r28, r16
 1f2:	ce 14       	cp	r12, r14
 1f4:	df 04       	cpc	r13, r15
 1f6:	f9 f6       	brne	.-66     	; 0x1b6 <write_buffer+0x2a>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <clear_buffer>:
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e0       	ldi	r19, 0x04	; 4
 20e:	fc 01       	movw	r30, r24
 210:	a9 01       	movw	r20, r18
 212:	11 92       	st	Z+, r1
 214:	41 50       	subi	r20, 0x01	; 1
 216:	50 40       	sbci	r21, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <clear_buffer+0x8>
 21a:	08 95       	ret

0000021c <setpixel>:
 21c:	66 23       	and	r22, r22
 21e:	dc f0       	brlt	.+54     	; 0x256 <setpixel+0x3a>
 220:	40 34       	cpi	r20, 0x40	; 64
 222:	c8 f4       	brcc	.+50     	; 0x256 <setpixel+0x3a>
 224:	24 2f       	mov	r18, r20
 226:	26 95       	lsr	r18
 228:	26 95       	lsr	r18
 22a:	26 95       	lsr	r18
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	30 e8       	ldi	r19, 0x80	; 128
 230:	23 9f       	mul	r18, r19
 232:	60 0d       	add	r22, r0
 234:	71 1d       	adc	r23, r1
 236:	11 24       	eor	r1, r1
 238:	fc 01       	movw	r30, r24
 23a:	e6 0f       	add	r30, r22
 23c:	f7 1f       	adc	r31, r23
 23e:	40 95       	com	r20
 240:	47 70       	andi	r20, 0x07	; 7
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <setpixel+0x30>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	4a 95       	dec	r20
 24e:	e2 f7       	brpl	.-8      	; 0x248 <setpixel+0x2c>
 250:	90 81       	ld	r25, Z
 252:	89 2b       	or	r24, r25
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <drawcircle>:


// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
 258:	2f 92       	push	r2
 25a:	3f 92       	push	r3
 25c:	4f 92       	push	r4
 25e:	5f 92       	push	r5
 260:	6f 92       	push	r6
 262:	7f 92       	push	r7
 264:	8f 92       	push	r8
 266:	9f 92       	push	r9
 268:	af 92       	push	r10
 26a:	bf 92       	push	r11
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	00 d0       	rcall	.+0      	; 0x27e <drawcircle+0x26>
 27e:	00 d0       	rcall	.+0      	; 0x280 <drawcircle+0x28>
 280:	00 d0       	rcall	.+0      	; 0x282 <drawcircle+0x2a>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	for(int x = x0-r; x <= x0+r; x++)
 286:	26 2e       	mov	r2, r22
 288:	31 2c       	mov	r3, r1
 28a:	42 2e       	mov	r4, r18
 28c:	51 2c       	mov	r5, r1
 28e:	31 01       	movw	r6, r2
 290:	64 18       	sub	r6, r4
 292:	75 08       	sbc	r7, r5
 294:	24 0c       	add	r2, r4
 296:	35 1c       	adc	r3, r5
 298:	26 14       	cp	r2, r6
 29a:	37 04       	cpc	r3, r7
 29c:	0c f4       	brge	.+2      	; 0x2a0 <drawcircle+0x48>
 29e:	54 c0       	rjmp	.+168    	; 0x348 <drawcircle+0xf0>
 2a0:	9a 83       	std	Y+2, r25	; 0x02
 2a2:	89 83       	std	Y+1, r24	; 0x01
	{
		for(int y = y0-r; y <= y0+r; y++)
		{
			if((r*r+r >= (x-x0)*(x-x0) + (y-y0)*(y-y0)) && (r*r-r <= (x-x0)*(x-x0) + (y-y0)*(y-y0)))
 2a4:	c2 01       	movw	r24, r4
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	84 9d       	mul	r24, r4
 2aa:	50 01       	movw	r10, r0
 2ac:	85 9d       	mul	r24, r5
 2ae:	b0 0c       	add	r11, r0
 2b0:	94 9d       	mul	r25, r4
 2b2:	b0 0c       	add	r11, r0
 2b4:	11 24       	eor	r1, r1
 2b6:	c2 01       	movw	r24, r4
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	45 01       	movw	r8, r10
 2be:	88 1a       	sub	r8, r24
 2c0:	99 0a       	sbc	r9, r25

// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
	for(int x = x0-r; x <= x0+r; x++)
	{
		for(int y = y0-r; y <= y0+r; y++)
 2c2:	04 2f       	mov	r16, r20
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	72 01       	movw	r14, r4
 2c8:	e0 0e       	add	r14, r16
 2ca:	f1 1e       	adc	r15, r17
 2cc:	26 2f       	mov	r18, r22
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	3c 83       	std	Y+4, r19	; 0x04
 2d2:	2b 83       	std	Y+3, r18	; 0x03
 2d4:	c8 01       	movw	r24, r16
 2d6:	84 19       	sub	r24, r4
 2d8:	95 09       	sbc	r25, r5
 2da:	9e 83       	std	Y+6, r25	; 0x06
 2dc:	8d 83       	std	Y+5, r24	; 0x05
 2de:	e8 16       	cp	r14, r24
 2e0:	f9 06       	cpc	r15, r25
 2e2:	64 f1       	brlt	.+88     	; 0x33c <drawcircle+0xe4>
 2e4:	c3 01       	movw	r24, r6
 2e6:	2b 81       	ldd	r18, Y+3	; 0x03
 2e8:	3c 81       	ldd	r19, Y+4	; 0x04
 2ea:	82 1b       	sub	r24, r18
 2ec:	93 0b       	sbc	r25, r19
		{
			if((r*r+r >= (x-x0)*(x-x0) + (y-y0)*(y-y0)) && (r*r-r <= (x-x0)*(x-x0) + (y-y0)*(y-y0)))
 2ee:	88 9f       	mul	r24, r24
 2f0:	60 01       	movw	r12, r0
 2f2:	89 9f       	mul	r24, r25
 2f4:	d0 0c       	add	r13, r0
 2f6:	d0 0c       	add	r13, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2d 81       	ldd	r18, Y+5	; 0x05
 2fc:	3e 81       	ldd	r19, Y+6	; 0x06
 2fe:	20 1b       	sub	r18, r16
 300:	31 0b       	sbc	r19, r17
 302:	22 9f       	mul	r18, r18
 304:	c0 01       	movw	r24, r0
 306:	23 9f       	mul	r18, r19
 308:	90 0d       	add	r25, r0
 30a:	90 0d       	add	r25, r0
 30c:	11 24       	eor	r1, r1
 30e:	8c 0d       	add	r24, r12
 310:	9d 1d       	adc	r25, r13
 312:	a8 16       	cp	r10, r24
 314:	b9 06       	cpc	r11, r25
 316:	54 f0       	brlt	.+20     	; 0x32c <drawcircle+0xd4>
 318:	88 15       	cp	r24, r8
 31a:	99 05       	cpc	r25, r9
 31c:	3c f0       	brlt	.+14     	; 0x32c <drawcircle+0xd4>
			{
				setpixel(buff, x, y, 0);
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	4d 81       	ldd	r20, Y+5	; 0x05
 322:	66 2d       	mov	r22, r6
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	9a 81       	ldd	r25, Y+2	; 0x02
 328:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>

// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
	for(int x = x0-r; x <= x0+r; x++)
	{
		for(int y = y0-r; y <= y0+r; y++)
 32c:	8d 81       	ldd	r24, Y+5	; 0x05
 32e:	9e 81       	ldd	r25, Y+6	; 0x06
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	9e 83       	std	Y+6, r25	; 0x06
 334:	8d 83       	std	Y+5, r24	; 0x05
 336:	e8 16       	cp	r14, r24
 338:	f9 06       	cpc	r15, r25
 33a:	fc f6       	brge	.-66     	; 0x2fa <drawcircle+0xa2>
}


// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
	for(int x = x0-r; x <= x0+r; x++)
 33c:	9f ef       	ldi	r25, 0xFF	; 255
 33e:	69 1a       	sub	r6, r25
 340:	79 0a       	sbc	r7, r25
 342:	26 14       	cp	r2, r6
 344:	37 04       	cpc	r3, r7
 346:	34 f6       	brge	.-116    	; 0x2d4 <drawcircle+0x7c>
			{
				setpixel(buff, x, y, 0);
			}
		}
	}
}
 348:	26 96       	adiw	r28, 0x06	; 6
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	9f 90       	pop	r9
 36a:	8f 90       	pop	r8
 36c:	7f 90       	pop	r7
 36e:	6f 90       	pop	r6
 370:	5f 90       	pop	r5
 372:	4f 90       	pop	r4
 374:	3f 90       	pop	r3
 376:	2f 90       	pop	r2
 378:	08 95       	ret

0000037a <main>:
char displayChar = 0;

int main(void)
{
	//setting up the gpio for backlight
	DDRD |= 0x80;
 37a:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
 37c:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
 37e:	8b b1       	in	r24, 0x0b	; 11
 380:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
 382:	84 b1       	in	r24, 0x04	; 4
 384:	85 60       	ori	r24, 0x05	; 5
 386:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
 388:	85 b1       	in	r24, 0x05	; 5
 38a:	8a 7f       	andi	r24, 0xFA	; 250
 38c:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
 38e:	85 b1       	in	r24, 0x05	; 5
 390:	85 b9       	out	0x05, r24	; 5
	
	//lcd initialisation
	lcd_init();
 392:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 396:	8f ea       	ldi	r24, 0xAF	; 175
 398:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 39c:	88 e1       	ldi	r24, 0x18	; 24
 39e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_brightness>
	write_buffer(buff);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3aa:	2f e7       	ldi	r18, 0x7F	; 127
 3ac:	8a e1       	ldi	r24, 0x1A	; 26
 3ae:	96 e0       	ldi	r25, 0x06	; 6
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x36>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x40>
 3ba:	00 00       	nop
	_delay_ms(2000);
	clear_buffer(buff);
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
	{
		
		//drawchar(buff,0,0,displayChar);
		//_delay_ms(500);
		//displayChar++;
		clear_buffer(buff);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
		//drawrect(buff, 125, 62, 15, 14, 0);
		//fillcircle(buff, 100, 43, 20, 0);
		drawcircle(buff, 64, 32, 2, 0);
 3cc:	00 e0       	ldi	r16, 0x00	; 0
 3ce:	22 e0       	ldi	r18, 0x02	; 2
 3d0:	40 e2       	ldi	r20, 0x20	; 32
 3d2:	60 e4       	ldi	r22, 0x40	; 64
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 2c 01 	call	0x258	; 0x258 <drawcircle>
		write_buffer(buff);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
 3e4:	ef cf       	rjmp	.-34     	; 0x3c4 <main+0x4a>

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
